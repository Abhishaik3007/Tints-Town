import customtkinter as ctk
from enum import Enum, auto
from PIL import Image
import random
import time
import sys
import os

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Enum to track different states/screens of the application
class GameState(Enum):
    HOME = auto()
    TOWN = auto()
    RULES = auto()
    CONTROLS = auto()
    THEMES = auto()
    
#TODO: Mouse Controls, One row of more themes ,loading screen animation???

class tTown(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Tints Town")
        self.geometry("900x400")
        self.resizable(False, False)
        
        self.home = resource_path('H1.png')
        self.home_pic = ctk.CTkImage(light_image=Image.open(os.path.join(self.home)), size=(30 , 30))
        self.icon = resource_path('puzzle.ico')
        self.iconbitmap(self.icon)
        
        self.bg = '#6178EA'
        self.config(background=self.bg)
        self.high_score = self.load_high_score()  # Load high score when the game starts
        
        self.Q = []  # List to store the sequence generated by the computer
        self.A = []  # List to store the sequence pressed by the user
        self.level = 1  # Start from level 1
        self.count = 4  # Start from 4 blinks

        # Font Family
        self.font = ctk.CTkFont(family="Cascadia Code", size=20)
        self.Foont = ctk.CTkFont(family="Comic Sans MS", size=30)
        self.Font = ctk.CTkFont(family="Comic Sans MS", size=40)
        
        self.bind('<Escape>', lambda event: self.quit())
        self.bind("<KeyPress>", self.butt_press)
        
        self.current_state = GameState.HOME
        
        self.make_themes()
        self.make_home()

    def load_high_score(self):
        high_score_path = resource_path("highscore.txt")
        try:
            with open(high_score_path, "r") as file:
                return int(file.read())
        except (FileNotFoundError, ValueError):
            return 0  # Default high score if file not found or invalid

    def save_high_score(self, score):
        high_score_path = resource_path("highscore.txt")
        with open(high_score_path, "w") as file:
            file.write(str(score))

    def make_home(self):
        self.current_state = GameState.HOME
        self.intro_label = ctk.CTkLabel(self, text="Hellowww \n Welcome to Tint Town", bg_color=self.bg, font=self.Font)
        self.intro_label.pack(pady=25)
        self.start_button = ctk.CTkButton(self, text="Start", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.goto_tTown)
        self.start_button.pack(pady=10)
        self.rules_button = ctk.CTkButton(self, text="Rules", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.goto_rules)
        self.rules_button.pack(pady=10)
        self.settings_button = ctk.CTkButton(self, text="Controls", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.goto_controls)
        self.settings_button.pack(pady=10)
        self.themes_button = ctk.CTkButton(self, text="Themes", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.goto_themes)
        self.themes_button.pack(pady=10)

    def destroy_home(self):
        # Destroy the home screen widgets
        self.intro_label.destroy()
        self.start_button.destroy()
        self.rules_button.destroy()
        self.settings_button.destroy()
        self.themes_button.destroy()

    def goto_tTown(self):
        self.destroy_home()
        self.make_tTown()

    def make_tTown(self):
        self.current_state = GameState.TOWN
        self.go_home = ctk.CTkButton(self, text='', width=50, height=50, image=self.home_pic, fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', command=self.clear_screen)
        self.go_home.place(x=25, y=25)
        self.town_roof = ctk.CTkLabel(self, text=f"Level : {self.level}", bg_color=self.bg, font=self.Foont)
        self.town_roof.pack(pady=10)
        
        # Creating the town_wall frame with 4 equally spaced square labels
        self.town_wall = ctk.CTkFrame(self, bg_color=self.bg, fg_color="#fff", corner_radius=10)
        self.town_wall.pack(padx=20, pady=5)

        self.town_wall.columnconfigure((0, 1, 2, 3), weight=1)  # Equal column spacing

        self.square_red = ctk.CTkLabel(self.town_wall, text='', bg_color="#fff", fg_color='#D3D3D3', corner_radius=10, width=125, height=125)
        self.square_red.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

        self.square_green = ctk.CTkLabel(self.town_wall, text='', bg_color="#fff", fg_color='#D3D3D3', corner_radius=10, width=125, height=125)
        self.square_green.grid(row=0, column=1, padx=5, pady=10, sticky='nsew')

        self.square_blue = ctk.CTkLabel(self.town_wall, text='', bg_color="#fff", fg_color='#D3D3D3', corner_radius=10, width=125, height=125)
        self.square_blue.grid(row=0, column=2, padx=5, pady=10, sticky='nsew')

        self.square_yellow = ctk.CTkLabel(self.town_wall, text='', bg_color="#fff", fg_color='#D3D3D3', corner_radius=10, width=125, height=125)
        self.square_yellow.grid(row=0, column=3, padx=10, pady=10, sticky='nsew')

        # Creating a separate frame for the highscore
        self.highscore_frame = ctk.CTkFrame(self, bg_color=self.bg, fg_color="#fff", corner_radius=10)
        
        self.highscore_label = ctk.CTkLabel(self.highscore_frame, text=f"town\nHighScore\n\n{self.high_score}\n", bg_color="#fff", fg_color='#fff', text_color='#000', width=75, height=150, corner_radius=10, font=self.font)
        self.highscore_label.pack(padx=10, pady=10)
        
        self.highscore_frame.pack(side='left',padx=20, pady=(10, 20))

        # Creating a separate frame for the buttons
        self.controls_frame = ctk.CTkFrame(self, bg_color=self.bg, fg_color="#fff", corner_radius=10)

        # Small representation of town_wall with buttons instead of labels
        self.button_town_wall = ctk.CTkFrame(self.controls_frame, bg_color="#fff", fg_color="#fff", corner_radius=5,)
        self.button_town_wall.columnconfigure((0, 1, 2, 3), weight=1)  # Equal column spacing

        self.button1 = ctk.CTkButton(self.button_town_wall, text='A', bg_color="#fff", fg_color='#FF595E', hover_color='#FE8D91', text_color='#000',corner_radius=5, width=75, height=75, font=self.font, command=lambda color='R': self.blink_color(color))
        self.button1.grid(row=0, column=0, padx=2.5, pady=5, sticky='nsew')

        self.button2 = ctk.CTkButton(self.button_town_wall, text='S', bg_color="#fff", fg_color='#8BC927', hover_color='#A4D760', text_color='#000',corner_radius=5, width=75, height=75, font=self.font, command=lambda color='G': self.blink_color(color))
        self.button2.grid(row=0, column=1, padx=5, pady=5, sticky='nsew')

        self.button3 = ctk.CTkButton(self.button_town_wall, text='D', bg_color="#fff", fg_color='#48CAE4', hover_color='#AFE4F3', text_color='#000',corner_radius=5, width=75, height=75, font=self.font, command=lambda color='B': self.blink_color(color))
        self.button3.grid(row=0, column=2, padx=5, pady=5, sticky='nsew')

        self.button4 = ctk.CTkButton(self.button_town_wall, text='F', bg_color="#fff", fg_color='#FEE440', hover_color='#FFEB7B', text_color='#000',corner_radius=5, width=75, height=75, font=self.font, command=lambda color='Y': self.blink_color(color))
        self.button4.grid(row=0, column=3, padx=2.5, pady=5, sticky='nsew')
        
        self.button_town_wall.pack(padx=10, pady=5)
        
        self.controls_frame.pack(side='left', padx=(85,0), pady=10)

        # Start/Next button
        self.start_button = ctk.CTkButton(self, text='Start', state='normal', bg_color=self.bg, fg_color='#fff', text_color='#000', hover_color='#999', width=100, height=25, corner_radius=5, font=self.font, command=self.new_game)
        self.start_button.pack(side='right', pady=30, padx=65)
        
        self.next_button = ctk.CTkButton(self, text='Next', state='disabled', bg_color=self.bg, fg_color='#fff', text_color='#000', hover_color='#999', width=100, height=25, corner_radius=5, font=self.font, command=self.play_round)
        self.retry_button = ctk.CTkButton(self, text='Retry', state="disabled", bg_color=self.bg, fg_color='#fff', text_color='#000', hover_color='#999', width=100, height=25, corner_radius=5, font=self.font, command=self.new_game)

    def goto_rules(self):
        self.destroy_home()  # Destroy home screen widgets
        self.make_rules()    # Show rules screen widgets

    def make_rules(self):
        self.current_state = GameState.RULES
        self.rules_head = ctk.CTkLabel(self, text="How to play???", bg_color=self.bg, font=self.Font)
        self.rules_head.pack(pady=25)
        self.rules_body = ctk.CTkFrame(self, bg_color=self.bg, fg_color=self.bg)
        
        self.r1 = ctk.CTkLabel(self.rules_body, text="1. Watch the color pattern carefully.", bg_color=self.bg, font=self.font, anchor='w')
        self.r1.pack(pady=5, fill='x')
        self.r2 = ctk.CTkLabel(self.rules_body, text="2. Press the buttons in the same order.", bg_color=self.bg, font=self.font, anchor='w')
        self.r2.pack(pady=5, fill='x')
        self.r3 = ctk.CTkLabel(self.rules_body, text="3. Try to make your high score.", bg_color=self.bg, font=self.font, anchor='w')
        self.r3.pack(pady=5, fill='x')
        self.r4 = ctk.CTkLabel(self.rules_body, text="4. Enjoy Tint Town!", bg_color=self.bg, font=self.font, anchor='w')
        self.r4.pack(pady=5, fill='x')
        
        self.rules_body.pack(pady=20, padx=(0, 20))
        
        # Add a "Home" button to return to the main screen
        self.go_home = ctk.CTkButton(self, text="Home", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.clear_screen)
        self.go_home.pack(pady=20)
    
    def goto_controls(self):
        self.destroy_home()
        self.make_controls()
    
    def make_controls(self):
        self.current_state = GameState.CONTROLS
        self.controls_head = ctk.CTkLabel(self, text="Controls", bg_color=self.bg, font=self.Font)
        self.controls_head.pack(pady=25)
    
        self.controls_body = ctk.CTkFrame(self, bg_color=self.bg, fg_color="#fff", corner_radius=10)
    
        # Create rounded corners using CTkFrame
        self.c1_frame = ctk.CTkFrame(self.controls_body, corner_radius=10, fg_color="#ddd")
        self.c1 = ctk.CTkLabel(self.c1_frame, text=" Play : A ,S ,D ,F ", bg_color="#ddd", text_color="#000", font=self.font)
        self.c1.pack(padx=10, pady=10)
        self.c1_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
    
        self.c2_frame = ctk.CTkFrame(self.controls_body, corner_radius=10, fg_color="#ddd")
        self.c2 = ctk.CTkLabel(self.c2_frame, text=" Home : H, BackSpace ", bg_color="#ddd", text_color="#000", font=self.font)
        self.c2.pack(padx=10, pady=10)
        self.c2_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
    
        self.c3_frame = ctk.CTkFrame(self.controls_body, corner_radius=10, fg_color="#ddd")
        self.c3 = ctk.CTkLabel(self.c3_frame, text=" Retry : R ", bg_color="#ddd", text_color="#000", font=self.font)
        self.c3.pack(padx=10, pady=10)
        self.c3_frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
    
        self.c4_frame = ctk.CTkFrame(self.controls_body, corner_radius=10, fg_color="#ddd")
        self.c4 = ctk.CTkLabel(self.c4_frame, text=" Next/Start : N, Enter ", bg_color="#ddd", text_color="#000", font=self.font)
        self.c4.pack(padx=10, pady=10)
        self.c4_frame.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")
    
        # Make the grid cells expand to fill available space
        self.controls_body.grid_rowconfigure(0, weight=1)
        self.controls_body.grid_rowconfigure(1, weight=1)
        self.controls_body.grid_columnconfigure(0, weight=1)
        self.controls_body.grid_columnconfigure(1, weight=1)
    
        self.controls_body.pack(pady=10, ipady=10, ipadx=10)
    
        # Add a "Home" button to return to the main screen
        self.go_home = ctk.CTkButton(self, text="Home", fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', font=self.font, command=self.clear_screen)
        self.go_home.pack(pady=35)
    
    def goto_themes(self):
        self.current_state = GameState.THEMES
        self.make_themes()
        self.destroy_home()
        # Show the themes screen
        self.themes_head.pack(pady=25)
        self.go_home.place(x=25,y=25)
        self.themes_body.pack(padx=20, pady=20, ipady=10, ipadx=10)
        
    def make_themes(self):
        self.go_home = ctk.CTkButton(self, text='', width=50, height=50, image=self.home_pic, fg_color='#fff', text_color="#000", bg_color=self.bg, hover_color='#ddd', command=self.clear_screen)
        self.themes_head = ctk.CTkLabel(self, text="Themes", bg_color=self.bg, font=self.Font)
    
        # Creating a frame for the themes body with a 2x4 grid
        self.themes_body = ctk.CTkFrame(self, bg_color=self.bg, fg_color="#fff", corner_radius=10)
    
        # Create rounded corners using CTkFrame, arranged in a 2x4 grid
        self.t1_frame = ctk.CTkButton(self.themes_body, text='Pink', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#F997B5", hover_color='#FEAECC', command = lambda: self.change_theme("#F997B5"))
        self.t1_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
    
        self.t2_frame = ctk.CTkButton(self.themes_body, text='Lavender', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#B59BCE", hover_color='#CCB4DF', command = lambda: self.change_theme("#B59BCE"))
        self.t2_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
    
        self.t3_frame = ctk.CTkButton(self.themes_body, text='Royal Purple', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#6178EA", hover_color='#5063C2', command = lambda: self.change_theme("#6178EA"))
        self.t3_frame.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")
    
        self.t4_frame = ctk.CTkButton(self.themes_body, text='Witch Green', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#598057", hover_color='#466646', command = lambda: self.change_theme("#598057"))
        self.t4_frame.grid(row=0, column=3, padx=10, pady=10, sticky="nsew")
    
        self.t5_frame = ctk.CTkButton(self.themes_body, text='Mud', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#A3B088", hover_color='#8B9972', command = lambda: self.change_theme("#A3B088"))
        self.t5_frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
    
        self.t6_frame = ctk.CTkButton(self.themes_body, text='Bitchy Witch', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#344F40", hover_color='#2B4234', command = lambda: self.change_theme("#344F40"))
        self.t6_frame.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")
    
        self.t7_frame = ctk.CTkButton(self.themes_body, text='Aliens', font=self.font, height=25, corner_radius=10,text_color='#fff',bg_color='#fff', fg_color="#00171E", hover_color='#004052', command = lambda: self.change_theme("#00171E"))
        self.t7_frame.grid(row=1, column=2, padx=10, pady=10, sticky="nsew")
    
        self.t8_frame = ctk.CTkButton(self.themes_body, text='Ocean', font=self.font, height=25, corner_radius=10, text_color='#fff', bg_color='#fff', fg_color="#00A8E8", hover_color='#00BFFF', command=lambda: self.change_theme("#00A8E8"))
        self.t8_frame.grid(row=1, column=3, padx=10, pady=10, sticky="nsew")
    
        # Make the grid cells expand to fill available space
        self.themes_body.grid_rowconfigure(0, weight=1)
        self.themes_body.grid_rowconfigure(1, weight=1)
        self.themes_body.grid_columnconfigure(0, weight=1)
        self.themes_body.grid_columnconfigure(1, weight=1)
        self.themes_body.grid_columnconfigure(2, weight=1)
        self.themes_body.grid_columnconfigure(3, weight=1)
        
        # Hide the themes screen initially
        self.go_home.place_forget()
        self.themes_head.pack_forget()
        self.themes_body.pack_forget()
        
    def clear_screen(self):
        # Destroy the current screen's widgets
        for widget in self.winfo_children():
            widget.destroy()
        # Show the home screen again
        self.make_home()
        
    def change_theme(self, color):
        self.bg = color
        self.config(background=self.bg)
        self.themes_head.configure(bg_color=self.bg)
        self.themes_body.configure(bg_color=self.bg)
        self.go_home.configure(bg_color=self.bg)

    #---Game Mechanics--->
    def new_game(self):
        self.start_button.configure(state='disabled')
        self.start_button.pack_forget()
        self.retry_button.configure(state='disabled')
        self.retry_button.pack_forget()
        self.update()
        self.level = 1  # Start at level 1
        self.count = 4  # Start with 4 blinks
        self.update()
        self.play_round()

    def play_round(self):
        self.next_button.configure(state='disabled')
        self.next_button.pack_forget()
        self.town_roof.configure(text=f"Level : {self.level}")
        self.town_wall.configure(fg_color='#fff')
        self.update()
        self.Q = []  # Reset the computer's sequence
        self.A = []  # Reset the user's sequence
        time.sleep(0.5)
        self.generate_sequence()  # Generate and display the next sequence

    def generate_sequence(self):
        for i in range(self.count):
            new_color = random.choice(['R', 'G', 'B', 'Y'])
            self.Q.append(new_color)
        print(self.Q)
        self.display_sequence()

    def display_sequence(self):
        for color in self.Q:
            self.blink_color(color)
            time.sleep(0.5)  # Pause between colors
    
    def check_sequence(self):
        if self.A == self.Q[:len(self.A)]:
            if len(self.A) == len(self.Q):
                if self.level > self.high_score:
                    self.high_score = self.level
                    self.save_high_score(self.high_score)
                    self.highscore_label.configure(text=f"town\nHighScore\n\n{self.high_score}\n")
                self.level += 1
                self.count += 1
                self.town_wall.configure(fg_color='#06d6a0')
                # To Move to the next round
                self.next_button.configure(state='normal')
                self.next_button.pack(side='right', pady=30, padx=65)
                self.update()
                
        else:
            self.end_game()  # End the game if the sequence doesn't match

    def end_game(self):
        self.town_roof.configure(text="Game Over")
        self.town_wall.configure(fg_color='#FF595E')
        self.retry_button.configure(state='normal')
        self.retry_button.pack(side='right', pady=30, padx=65)

    def blink_color(self, color):
        if color == 'R':
            self.square_red.configure(fg_color='#FF595E')
            self.update_idletasks()
            time.sleep(0.3)
            self.square_red.configure(fg_color='#D3D3D3')
            self.update_idletasks()
        elif color == 'G':
            self.square_green.configure(fg_color='#8BC927')
            self.update_idletasks()
            time.sleep(0.3)
            self.square_green.configure(fg_color='#D3D3D3')
            self.update_idletasks()
        elif color == 'B':
            self.square_blue.configure(fg_color='#48CAE4')
            self.update_idletasks()
            time.sleep(0.3)
            self.square_blue.configure(fg_color='#D3D3D3')
            self.update_idletasks()
        elif color == 'Y':
            self.square_yellow.configure(fg_color='#FEE440')
            self.update_idletasks()
            time.sleep(0.3)
            self.square_yellow.configure(fg_color='#D3D3D3')
            self.update_idletasks()

    def red(self):
        if self.Q != []:
            self.A.append('R')
            self.check_sequence()

    def green(self):
        if self.Q != []:
            self.A.append('G')
            self.check_sequence()

    def blue(self):
        if self.Q != []:
            self.A.append('B')
            self.check_sequence()

    def yellow(self):
        if self.Q != []:
            self.A.append('Y')
            self.check_sequence()

    def butt_press(self, event):
        key = event.keysym.lower()  # Convert the key symbol to lowercase

        if key == 'a' and self.current_state == GameState.TOWN:
            self.red()
            self.blink_color('R')
        elif key == 's' and self.current_state == GameState.TOWN:
            self.green()
            self.blink_color('G')
        elif key == 'd' and self.current_state == GameState.TOWN:
            self.blue()
            self.blink_color('B')
        elif key == 'f' and self.current_state == GameState.TOWN:
            self.yellow()
            self.blink_color('Y')
        elif key == 'h':
            if self.current_state != GameState.HOME:
                self.clear_screen()
        elif event.keysym == 'BackSpace':
            if self.current_state != GameState.HOME:
                self.clear_screen()
        elif key == 'r' and self.current_state == GameState.TOWN:
            if self.retry_button.cget("state") == "normal":
                self.new_game()
        elif event.keysym in ('n', 'N', 'Return', 'KP_Enter') and self.current_state == GameState.TOWN:
            if self.start_button.cget("state") == "normal":
                self.new_game()
            elif self.next_button.cget("state") == "normal":
                self.play_round()
        else:
            print(f"Other : {event.keysym}")

if __name__ == "__main__":
    app = tTown()
    app.mainloop()